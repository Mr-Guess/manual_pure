<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.ay">
	</context:component-scan>
	
	<!-- spring 提供的获取外部文件信息的配置 -->
	<bean id="propertyConfigurer"  class="com.ay.jfds.create.tools.Property">    
        <property name="locations" value="classpath:init.properties">    
        </property>    
    </bean> 
    <!-- 二进制文件支持 -->
	<bean id="lobHandler"  class="org.springframework.jdbc.support.lob.DefaultLobHandler"/>  
	<!-- 数据源的配置  -->
	<!-- id 为dataSource的bean 是默认数据源的配置  -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass">
			<value>${datasource.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${datasource.url}</value>
		</property>
		<property name="user">
			<value>${datasource.username}</value>
		</property>
		<property name="password">
			<value>${datasource.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>
		<!-- 初始化时获取连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>
		<!-- 连接池中保留的最小连接数 -->
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<!-- -连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>
		<!-- 连接最大空闲时间,单位为秒。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>
		<!-- 检查所有连接池中的空闲连接的时间间隔，单位是秒。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。 -->
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<!-- -c3p0支持的线程数,c3p0是异步操作的，通过多线程实现多个操作同时被执行。Default: 3- -->
		<property name="numHelperThreads">
			<value>${c3p0.numHelperThreads}</value>
		</property>
	</bean>
	
	<!-- id 为dataSource 的数据源我们规定为主数据源 。
		id 为dataSourceTest的数据源是在使用多数据源时配置的第二个数据源，不用时可以将其注释。
		如果需要使用则要在id=dynamicDataSource 的动态数据源配置中加入。不用时要将其注释。
		配置多数据源时，必须要保证每个数据源都能连接。
	-->
<!-- 	<bean id="dataSourceTest" class="com.mchange.v2.c3p0.ComboPooledDataSource"> -->
<!-- 		<property name="driverClass"> -->
<!-- 			<value>${datasourceTest.driverClassName}</value> -->
<!-- 		</property> -->
<!-- 		<property name="jdbcUrl"> -->
<!-- 			<value>${datasourceTest.url}</value> -->
<!-- 		</property> -->
<!-- 		<property name="user"> -->
<!-- 			<value>${datasourceTest.username}</value> -->
<!-- 		</property> -->
<!-- 		<property name="password"> -->
<!-- 			<value>${datasourceTest.password}</value> -->
<!-- 		</property> -->
<!-- 		<property name="acquireIncrement"> -->
<!-- 			<value>${c3p0.acquireIncrement}</value> -->
<!-- 		</property> -->
<!-- 		<property name="initialPoolSize"> -->
<!-- 			<value>${c3p0.initialPoolSize}</value> -->
<!-- 		</property> -->
<!-- 		<property name="minPoolSize"> -->
<!-- 			<value>${c3p0.minPoolSize}</value> -->
<!-- 		</property> -->
<!-- 		<property name="maxPoolSize"> -->
<!-- 			<value>${c3p0.maxPoolSize}</value> -->
<!-- 		</property> -->
<!-- 		<property name="maxIdleTime"> -->
<!-- 			<value>${c3p0.maxIdleTime}</value> -->
<!-- 		</property> -->
<!-- 		<property name="idleConnectionTestPeriod"> -->
<!-- 			<value>${c3p0.idleConnectionTestPeriod}</value> -->
<!-- 		</property> -->
<!-- 		<property name="maxStatements"> -->
<!-- 			<value>${c3p0.maxStatements}</value> -->
<!-- 		</property> -->
<!-- 		<property name="numHelperThreads"> -->
<!-- 			<value>${c3p0.numHelperThreads}</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<!-- 动态数据源 ：将配置的数据源引入其中，可以实现动态数据源。 -->
	<bean id="dynamicDataSource"
		class="com.ay.framework.core.utils.datasources.DynamicDataSource">
		<!-- targetDataSources 属性需要注入数据源，可以注入多个数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSource" value-ref="dataSource"/>
<!-- 			<entry key="dataSourceTest" value-ref="dataSourceTest" /> -->
			</map>
		</property>
		  
		<!-- 默认使用的数据源 -->
		<property name="defaultTargetDataSource" ref="dataSource" />
	</bean>
	<!-- sql执行器以及数据库方言的配置  -->
	<bean id="sqlExecutor"
		class="com.ay.framework.core.dao.pagination.PaginationSqlExecutor">
<!-- 		<property name="dialect"> -->
<!-- 		<ref bean="mySql"/>  -->
		<!-- <ref bean="sqlserver" />-->
<!-- 		</property> -->
	</bean>
<!-- 	<bean id="oracle" -->
<!-- 		class="com.ay.framework.core.dao.dialect.OracleDialect" /> -->
<!-- 	<bean id="sqlserver" -->
<!-- 		class="com.ay.framework.core.dao.dialect.SqlServerDialect" /> -->
<!-- 	<bean id="mySql" class="com.ay.framework.core.dao.dialect.MySqlDialect"/> -->
	<!-- 实体BaseDAO类  -->
	<bean id="baseDaoSupport" abstract="true"
        class="com.ay.framework.core.dao.BaseDaoSupport"
        init-method="initialize">
        <property name="dataSource">
            <ref bean="dynamicDataSource" />
        </property>
        <property name="sqlMapClient">
            <ref bean="sqlMapClient" />
        </property>
        <property name="sqlExecutor">
            <ref bean="sqlExecutor" />
        </property>
    </bean>
    
    <bean id="baseDao" abstract="true"
        class="com.ay.framework.core.dao.BaseDao" parent="baseDaoSupport">
    </bean>
	<!-- Spring iBatis配置 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" >
			<value>${sqlMapper.path}</value>
		</property>
		<property name="dataSource" ref="dynamicDataSource"></property>
		 <property name="lobHandler" ref="lobHandler"/>   
	</bean>
	
	<!-- spring 事务处理  start-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref local="dynamicDataSource" />
		</property>
	</bean>
	


    <!-- 配置事务属性  -->
	<bean id="transactionInterceptor"  
        class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager" />  
        <property name="transactionAttributes">  
            <props>  
                <prop key="*">PROPAGATION_REQUIRED</prop>  
            </props> 
        </property>  
    </bean>
      
	<!-- spring Aop 事务配置方式，在运行期动态创建代理事务类 -->	
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <property name="beanNames">  
            <list>   
                <value>*Service</value>
            </list>  
        </property>  
        <property name="interceptorNames">  
            <list>  
                <value>transactionInterceptor</value>  
            </list>  
        </property>  
    </bean>  
    
    <!-- aspectJ事务配置方式，在编译期创建代理事务类 -->
<!-- 	<tx:annotation-driven transaction-manager="transactionManager"/> -->
<!-- 	<tx:advice id="govTransactionAdvice" transaction-manager="transactionManager"/> -->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut expression="execution (* com.ay.jfds.yz..*.*Service.*(..))" id="govServiceMethod"/> -->
<!-- 		<aop:advisor advice-ref="govTransactionAdvice" pointcut-ref="govServiceMethod"/> -->
<!-- 	</aop:config> -->
    
	<!-- spring 事务处理  end-->
	
	<!-- 用于获取当前spring容器内的bean -->
	<bean id="springContextHolder" class="com.ay.framework.core.utils.spring.SpringContextHolder" />
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
</beans>